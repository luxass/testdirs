/**
 * This module contains types used throughout the project.
 * @module types
 */

import type { z } from "zod";
import type {
  FIXTURE_TYPE_LINK_SYMBOL,
  FIXTURE_TYPE_SYMLINK_SYMBOL,
} from "./constants";

/**
 * A function type that determines the encoding for a given file path.
 * @param {string} path - The path to the file.
 * @returns {BufferEncoding | null} The encoding to be used for the file, as a {@link BufferEncoding}.
 */
export type EncodingForFileFn = (path: string) => BufferEncoding | null;

/**
 * Represents the possible content types that can be stored in a test directory.
 */
export type DirectoryContent
  = | string
    | boolean
    | number
    | Uint8Array
    | null
    | undefined
    | bigint
    | symbol
    | TestdirSymlink
    | TestdirLink
    | TestdirMetadata;

/**
 * Represents metadata for a file system entry.
 */
export interface FSMetadata {
  /**
   * The POSIX permission of the file system entry.
   */
  mode?: number;

  /**
   * The encoding of the file system entry.
   */
  encoding?: BufferEncoding | null;
}

/**
 * A JSON representation of a directory.
 */
export interface DirectoryJSON<T extends DirectoryContent = DirectoryContent> {
  /**
   * Is only set when generated by `fromFileSystem` or `fromFileSystemSync`.
   */
  [originalPath: symbol]: string | undefined;

  /**
   * The content of the directory.
   */
  [key: string]: T | DirectoryJSON<T>;
}

/**
 * Represents a symbolic link in a testing directory.
 */
export interface TestdirSymlink {
  /**
   * Internally used to mark and distinguish symlink fixtures from other fixture types.
   */
  [key: symbol]: typeof FIXTURE_TYPE_SYMLINK_SYMBOL;

  /**
   * The path to the symlink target.
   */
  path: string;
}

/**
 * Represents a symbolic link in the test directory.
 */
export interface TestdirLink {
  /**
   * Internally used to mark and distinguish link fixtures from other fixture types.
   */
  [key: symbol]: typeof FIXTURE_TYPE_LINK_SYMBOL;

  /**
   * The path to the link target.
   */
  path: string;
}

/**
 * Represents metadata for a test directory entry.
 */
export interface TestdirMetadata {
  /**
   * Internally used to store and retrieve metadata about test fixture definitions.
   */
  [key: symbol]: FSMetadata;

  /**
   * The content of the definition.
   */
  content: DirectoryContent | DirectoryJSON;
}

export interface FromFileSystemOptions {
  /**
   * An array of file names to
   * ignore when reading the directory.
   *
   * @default []
   *
   * @example
   * ```ts
   * const files = await fromFileSystem("path/to/dir", {
   *  ignore: ["node_modules", ".git"],
   * });
   * ```
   */
  ignore?: string[];

  /**
   * Whether to follow symbolic links.
   * @default true
   */
  followLinks?: boolean;

  /**
   * An object with extra files to include in the directory structure.
   * @default {}
   *
   * @example
   * ```ts
   * const files = await fromFileSystem("path/to/dir", {
   *  extras: {
   *   "extra-file.txt": "This is an extra file",
   *  },
   * });
   * ```
   */
  extras?: DirectoryJSON;

  /**
   * A function that determines the encoding to be used for a file.
   * @default utf-8
   *
   * @example
   * ```ts
   * const files = await fromFileSystem("path/to/dir", {
   *  getEncodingForFile: (path) => "utf-8",
   * });
   * ```
   */
  getEncodingForFile?: EncodingForFileFn;
}

export interface FactoryFnContext<TOptions> {
  readonly options: TOptions;
  readonly fixturePath: string;
  readonly files: DirectoryJSON;
}

export type FactoryFn<TOptions, TResult> = (
  context: FactoryFnContext<TOptions>
) => Promise<TResult> | TResult;

export type CustomHookFn<TOptions> = (options: TOptions) => Promise<void> | void;

export type TestdirOptions<T extends z.ZodType> = z.input<T>;

export interface TestdirFactoryOptions<
  TOptionsSchema extends z.ZodType,
  TResult,
  TExtensions extends Record<string, any>,
> {
  /**
   * A hook that is called before the test directory is created.
   */
  before?: CustomHookFn<TestdirOptions<TOptionsSchema>>;

  /**
   * A hook that is called after the test directory is created.
   */
  after?: CustomHookFn<TestdirOptions<TOptionsSchema>>;

  dirname: (options: TestdirOptions<TOptionsSchema>) => string | Promise<string>;

  /**
   * The schema for the options object.
   */
  optionsSchema: TOptionsSchema;

  extensions?: (testdir: TestdirFn<TestdirOptions<TOptionsSchema>, TResult>) => TExtensions;
}

export interface TestdirFn<TOptions, TResult> {
  (files: DirectoryJSON, options?: TOptions): Promise<TResult>;
}

export type ExtendedTestdirFn<
  TOptions,
  TResult,
  // eslint-disable-next-line ts/no-empty-object-type
  TExtensions extends Record<string, any> = {},
> = TestdirFn<TOptions, TResult> & TExtensions;
